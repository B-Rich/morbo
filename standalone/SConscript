# -*- Mode: Python -*-

freestanding_env = Environment()

freestanding_env['CFLAGS']  = "-Os -minline-all-stringops -m32 -march=pentium -mtune=core2 -pipe -g -std=gnu99 -ffreestanding -nostdlib -Wno-multichar -Wall"
freestanding_env['CFLAGS'] += " -ffunction-sections -fomit-frame-pointer -mregparm=3 "
freestanding_env['LINKFLAGS'] = "-m elf_i386 -gc-sections -N"
freestanding_env['LINK'] = "ld"
freestanding_env['ASFLAGS'] = "-g stabs -O5 -f elf32"

def CheckCommand(context, cmd):
       context.Message('Checking for %s command... ' % cmd)
       result = WhereIs(cmd)
       context.Result(result is not None)
       return result

conf = Configure(freestanding_env, custom_tests = {'CheckCommand' : CheckCommand})

if not conf.CheckCommand("yasm"):
    if not conf.CheckCommand("nasm"):
        print("Please install yasm or nasm!")
        Exit(1)
    else:
        conf.env['AS'] = "nasm"
else:
    conf.env['AS'] = "yasm"

if not (conf.CheckCHeader("stdint.h") and
        conf.CheckCHeader("stdarg.h")):
    print("Standard C headers are missing.")
    Exit(1)

freestanding_env = conf.Finish()

fenv = freestanding_env.Clone()

fenv['CPPPATH'] = ["#include", "include/"]
fenv['LINKFLAGS'] += " -T standalone/morbo.ld" 
fenv['LIBPATH'] = ['.']

stand = fenv.StaticLibrary('stand',
                           [ 'elf.c',
                             'hexdump.c',
                             'mbi.c',
                             'pci.c',
                             'pci_db.c',
                             'printf.c',
                             'reboot.c',
                             'serial.c',
                             'start.asm',
                             'util.c',
                             'version.c',

                             # libc stuff
                             'memcpy.c',
                             'memcmp.c',
                             'memset.c',
                             'strlen.c',

                             # FreeBSD libc stuff
                             'strncmp.c',
                             'strncpy.c',
                             'strtok.c',
                             'strtoull.c',
                             'qdivrem.c',
                             ])

tinf = fenv.StaticLibrary('tinf',
                          [ 'tinflate.c',
                            'tinfgzip.c',
                            'tinfzlib.c',
                            'adler32.c',
                            'crc32.c',
                            ])

AlwaysBuild(Command('version.inc', [], """git describe --dirty | sed 's/^\\(.*\\)$/"\\1"/' > $TARGET"""))

def DoInstall(prog):
    Depends(prog, 'morbo.ld')
    Install('#tftp', prog)

# Morbo

DoInstall(fenv.Program('morbo.debug',
                       [ 'crc16.c',
                         'morbo.c',
                         'ohci.c' ],
                       LIBS=['stand', 'tinf']))

# Zapp

DoInstall(fenv.Program('zapp.debug',
                       [ 'acpi.c',
                         'zapp.c',
                         ],
                       LIBS=['stand', 'tinf']))

# Bender

DoInstall(fenv.Program('bender.debug',
                       [ 'bender.c',
                         ],
                       LIBS=['stand', 'tinf']))

# Unzip

DoInstall(fenv.Program('unzip.debug',
                       [ 'unzip.c',
                         ],
                       LIBS=['stand', 'tinf']))

# Farnsworth

DoInstall(fenv.Program('farnsworth.debug',
                       [ 'farnsworth.c',
                         ],
                       LIBS=['stand', 'tinf']))

# IRQ shadow

DoInstall(fenv.Program('irqshadow.debug',
                       [ 'irqshadow.asm' ],
                       LIBS=['stand']))

# Performance tests

DoInstall(fenv.Program('basicperf.debug',
                       [ 'basicperf.c' ],
                       LIBS=['stand']))

DoInstall(fenv.Program('printtsc.debug',
                       [ 'printtsc.c' ],
                       LIBS=['stand']))

# EOF
